describe("Object",function(){describe("Object.keys",function(){var t={str:"boz",obj:{},arr:[],bool:!0,num:42,"null":null,undefined:void 0},e=[];for(var n in t)e.push(n);var i=Object.keys(t);it("should have correct length",function(){expect(i.length).toBe(7)}),it("should return an Array",function(){expect(Array.isArray(i)).toBe(!0)}),it("should return names which are own properties",function(){i.forEach(function(e){expect(t.hasOwnProperty(e)).toBe(!0)})}),it("should return names which are enumerable",function(){i.forEach(function(t){expect(e.indexOf(t)).toNotBe(-1)})}),it("should throw error for non object",function(){var t={};expect(function(){try{Object.keys(42)}catch(e){throw t}}).toThrow(t)})}),describe("Object.isExtensible",function(){var t={};it("should return true if object is extensible",function(){expect(Object.isExtensible(t)).toBe(!0)}),it("should return false if object is not extensible",function(){expect(Object.isExtensible(Object.preventExtensions(t))).toBe(!1)}),it("should return false if object is seal",function(){expect(Object.isExtensible(Object.seal(t))).toBe(!1)}),it("should return false if object is freeze",function(){expect(Object.isExtensible(Object.freeze(t))).toBe(!1)}),it("should throw error for non object",function(){var t={};expect(function(){try{Object.isExtensible(42)}catch(e){throw t}}).toThrow(t)})})});